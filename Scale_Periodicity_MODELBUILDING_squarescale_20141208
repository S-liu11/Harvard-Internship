###########################################################################
#   Scale_Periodicity_MODELBUILDING
#   BUILD PART, INSTANCE AND MESH    
#       
#       
#       
###########################################################################
# Lattice Vector
latvec1 = numpy.array([10.,0.])
latvec2 = numpy.array([10.*cos(ang),10.*sin(ang)])
# FOUR VECTORS DETERMINING THE COORDINATES OF THE CORNER
BL = numpy.array([0.,0.])
BR = BL + 1*latvec1
TL = BL + 1*latvec2
TR = BL + 1*latvec1 + 1*latvec2

# sketch for a single RVE
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=300.0)

#generate some feature points to build the crack and mesh
crack1=BR*((1-con)/2-0.001)
crack2=BR*((1-con)/2+0.001)
crack3=BR*((1+con)/2-0.001)
crack4=BR*((1+con)/2+0.001)
crack5=BR+TL*((1-con)/2-0.001)
crack6=BR+TL*((1-con)/2+0.001)
crack7=BR+TL*((1+con)/2-0.001)
crack8=BR+TL*((1+con)/2+0.001)
crack9=TL+BR*((1+con)/2+0.001)
crack10=TL+BR*((1+con)/2-0.001)
crack11=TL+BR*((1-con)/2+0.001)
crack12=TL+BR*((1-con)/2-0.001)
crack13=TL*((1+con)/2+0.001)
crack14=TL*((1+con)/2-0.001)
crack15=TL*((1-con)/2+0.001)
crack16=TL*((1-con)/2-0.001)
crack17=BR*(1-con)/2+TL*(lengthcrackratio+con)/2
crack18=BR*(1+con)/2+TL*(lengthcrackratio-con)/2
crack19=BR*(1-(lengthcrackratio+con)/2)+TL*(1-con)/2
crack20=BR*(1-(lengthcrackratio-con)/2)+TL*(1+con)/2
crack21=BR*(1+con)/2+TL*(1-(lengthcrackratio+con)/2)
crack22=BR*(1-con)/2+TL*(1-(lengthcrackratio-con)/2)
crack23=BR*(lengthcrackratio+con)/2+TL*(1+con)/2
crack24=BR*(lengthcrackratio-con)/2+TL*(1-con)/2
crack25=BR*(1-con)/2+TL*(1-con)/2
crack26=BR*(1+con)/2+TL*(1-con)/2
crack27=BR*(1+con)/2+TL*(1+con)/2
crack28=BR*(1-con)/2+TL*(1+con)/2

# generate the crack edges
mdb.models['Model-1'].sketches['__profile__'].Line(point1=BL, point2=crack1) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack1, point2=crack17)   
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack17, point2=crack2)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack2, point2=crack3)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack3, point2=crack18)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack18, point2=crack4)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=BR, point2=crack4) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=BR, point2=crack5) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack5, point2=crack19) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack19, point2=crack6)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack6, point2=crack7)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack7, point2=crack20)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack20, point2=crack8)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=TR, point2=crack8) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=TR, point2=crack9) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack9, point2=crack21)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack21, point2=crack10)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack10, point2=crack11)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack11, point2=crack22)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack22, point2=crack12)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=TL, point2=crack12) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=TL, point2=crack13)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack13, point2=crack23)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack23, point2=crack14)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack14, point2=crack15)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack15, point2=crack24)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack24, point2=crack16)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=BL, point2=crack16) 

#build the part 
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1UC', type= DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1UC'].BaseShell(sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']

#get a datum point on the position of crack5, this is used to partition face
mdb.models['Model-1'].parts['Part-1UC'].DatumPointByCoordinate(coords=(crack25[0], crack25[1], 0.0))
mdb.models['Model-1'].parts['Part-1UC'].DatumPointByCoordinate(coords=(crack26[0], crack26[1], 0.0))
mdb.models['Model-1'].parts['Part-1UC'].DatumPointByCoordinate(coords=(crack27[0], crack27[1], 0.0))
mdb.models['Model-1'].parts['Part-1UC'].DatumPointByCoordinate(coords=(crack28[0], crack28[1], 0.0))

#Part module: Virtual Nodes!!
    # part 2,3: virtual nodes.  Each should have 2 Nodes of 2 DOFs, F(2,2)
    #   Part-F1: Ux->F11,  Uy->F21,  shared by real and imaginary mesh
    #   Part-F2: Ux->F12,  Uy->F22,  shared by real and imaginary mesh
mdb.models['Model-1'].Part(dimensionality=THREE_D, 
    name='Part-Point', type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-Point'].ReferencePoint(point=(0.0, 0.0, 0.0))
    # Assign a set to the virtual node
mdb.models['Model-1'].parts['Part-Point'].Set(name='Set-Point', referencePoints=(
    mdb.models['Model-1'].parts['Part-Point'].referencePoints[1], )) 

#partition face to get a better meshing quality
p = mdb.models['Model-1'].parts['Part-1UC']
f = p.faces
v2, e, d = p.vertices, p.edges, p.datums
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack24[0], crack24[1], 
    0.0)), point2=d[2], 
    faces=f)
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack19[0], crack19[1], 
    0.0)), point2=d[2], 
    faces=f.findAt(coordinates=((crack11[0]+crack14[0])/2, (crack11[1]+crack14[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack18[0], crack18[1], 
    0.0)), point2=d[3], 
    faces=f.findAt(coordinates=((crack18[0]+crack26[0])/2, (crack18[1]+crack26[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack21[0], crack21[1], 
    0.0)), point2=d[3], 
    faces=f.findAt(coordinates=((crack21[0]+crack26[0])/2, (crack21[1]+crack26[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack23[0], crack23[1], 
    0.0)), point2=d[4], 
    faces=f.findAt(coordinates=((crack23[0]+crack27[0])/2, (crack23[1]+crack27[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack20[0], crack20[1], 
    0.0)), point2=d[4], 
    faces=f.findAt(coordinates=((crack20[0]+crack27[0])/2, (crack20[1]+crack27[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack17[0], crack17[1], 
    0.0)), point2=d[5], 
    faces=f.findAt(coordinates=((crack17[0]+crack28[0])/2, (crack17[1]+crack28[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack22[0], crack22[1], 
    0.0)), point2=d[5], 
    faces=f.findAt(coordinates=((crack22[0]+crack28[0])/2, (crack22[1]+crack28[1])/2, 
    0.0)))
# mesh
SEEDNUMBER=70 #ESTIMATED SEED NUMBER ON THE RVE'S EDGES
#CALCULATE THREE SEED NUMBERS ON EDGES OF DIFFERENT LENGTHS
SEEDSIZE1=int(SEEDNUMBER*con)
SEEDSIZE2=int(SEEDNUMBER*(1-con)/2)
ratio=1#RATIO OF THE SIZE OF THE LARGEST MESH TO THE SMALLEST ONES
#seed bias method: DOUBLE, to refine the mesh around the crack corner
#seed the edges by fixed constraint to guarantee a correct PBC
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((BL[0]+crack1[0])/2,(BL[1]+crack1[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((BL[0]+crack16[0])/2,(BL[1]+crack16[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((BR[0]+crack4[0])/2,(BR[1]+crack4[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((BR[0]+crack5[0])/2,(BR[1]+crack5[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((TR[0]+crack8[0])/2,(TR[1]+crack8[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((TR[0]+crack9[0])/2,(TR[1]+crack9[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((TL[0]+crack12[0])/2,(TL[1]+crack12[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((TL[0]+crack13[0])/2,(TL[1]+crack13[1])/2,0),)), ratio=ratio, number=SEEDSIZE2)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
	constraint=FIXED, endEdges=
	mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((crack2[0]+crack3[0])/2,(crack2[1]+crack3[1])/2,0),)), ratio=ratio, number=SEEDSIZE1)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
	constraint=FIXED, endEdges=
	mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((crack6[0]+crack7[0])/2,(crack6[1]+crack7[1])/2,0),)), ratio=ratio, number=SEEDSIZE1)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
	constraint=FIXED, endEdges=
	mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((crack10[0]+crack11[0])/2,(crack10[1]+crack11[1])/2,0),)), ratio=ratio, number=SEEDSIZE1)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
	constraint=FIXED, endEdges=
	mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((crack14[0]+crack15[0])/2,(crack14[1]+crack15[1])/2,0),)), ratio=ratio, number=SEEDSIZE1)

#mesh control: QUAD/TRI, FREE/STRUCTURED, S4R/S3
#DIFFERENT METHODS MAY APPLY FOR DIFFERENT PARAMETERS
mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
    QUAD, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=STRUCTURED) #QUAD
#mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
#    QUAD, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=FREE)
#mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
#    TRI, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=FREE)
mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(algorithm=
    DEFAULT, regions= mdb.models['Model-1'].parts['Part-1UC'].faces)
mdb.models['Model-1'].parts['Part-1UC'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD),), regions=(
   mdb.models['Model-1'].parts['Part-1UC'].faces, ))
#mdb.models['Model-1'].parts['Part-1UC'].setElementType(elemTypes=(ElemType(
#    elemCode=S3, elemLibrary=STANDARD),), regions=(
#    mdb.models['Model-1'].parts['Part-1UC'].faces, ))

# GENERATE MESH FIRST ==========================================================
mdb.models['Model-1'].parts['Part-1UC'].generateMesh()

# creat meshpart ===============================================================
mdb.models['Model-1'].parts['Part-1UC'].PartFromMesh(name='Part-RVE')
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)

# Instance it into assembly =================
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, 
    name='Part-RVE-1', part=mdb.models['Model-1'].parts['Part-RVE'])
	
# create set all ===============================================================
mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    mdb.models['Model-1'].parts['Part-RVE'].nodes, name='Set-all')

#FIND OUT THREE CRITICAL NODES ON THE SCALE AND SAVE THEM INTO SETS. THIS IS USED TO CALCULATE THE NORMAL VECTOR OF THE DEFORMED SCALE
# find out the tip of the crack
for node1 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node1.coordinates[0]-crack17[0])**2+(node1.coordinates[1]-crack17[1])**2 < 1e-10:
		break

mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node1.label-1:node1.label],), name='tip')

for node2 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node2.coordinates[0]-crack19[0])**2+(node2.coordinates[1]-crack19[1])**2 < 1e-10:
		break

mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node2.label-1:node2.label],), name='sidetip1')

for node3 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node3.coordinates[0]-crack21[0])**2+(node3.coordinates[1]-crack21[1])**2 < 1e-10:
		break

mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node3.label-1:node3.label],), name='sidetip2')

#=================
#Material module: EliteDouble32 (light green)
#=================
# density ======================================================================
RHO=1.0E-9;
mdb.models['Model-1'].Material(name='Material-rubber')
mdb.models['Model-1'].materials['Material-rubber'].Density(table=((RHO, ), ))

# Elastic property: Neo-Hookean ================================================
G0=0.2616
NU0=0.4950      # from K0/G0=100

C10=G0/2.0
D1=3.0*(1.0-2.0*NU0) / (G0 *(1.0+2.0*NU0))
 
mdb.models['Model-1'].materials['Material-rubber'].Hyperelastic(
    table=((C10, D1), ), 
    testData=OFF, type=NEO_HOOKE, volumetricResponse=VOLUMETRIC_DATA)

#=========================================================================
# SECTION
#=========================================================================
# HomogeneousSolidSection ======================================================
mdb.models['Model-1'].HomogeneousShellSection(material='Material-rubber', name=
    'Section-rubber', thickness=0.1)

# SECTION ASSIGNMENT ===========================================================
#mdb.models['Model-1'].parts['Part-lurc'].SectionAssignment(
#    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
#    mdb.models['Model-1'].parts['Part-lurc'].sets['Set-all']
#    , sectionName='Section-rubber')    # this command is limited to the not-previously-meshed parts
mdb.models['Model-1'].parts['Part-RVE'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['Model-1'].parts['Part-RVE'].elements), 
    sectionName='Section-rubber')

# LET ME KNOW IF YOU ARE FINISHED ==============================================
print 'Material definition Accomplished!!!'




#=================
# 2. Assembly: INSTANCE VIRTUAL NODES INTO ASSEMBLY
#=================
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-RealH1',
    part=mdb.models['Model-1'].parts['Part-Point'])
mdb.models['Model-1'].rootAssembly.instances['Part-RealH1'].translate(
    vector=(0.0, 0.0, 0.0))
#   # FOR THE H12, H22
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-RealH2',
    part=mdb.models['Model-1'].parts['Part-Point'])
mdb.models['Model-1'].rootAssembly.instances['Part-RealH2'].translate(
    vector=(0.0, 0.0, 0.0))
    
    
    
# LET ME KNOW IF YOU ARE FINISHED ==============================================
print 'Scale_Periodicity_MODELBUILDING_20141011.py Accomplished!!!'

