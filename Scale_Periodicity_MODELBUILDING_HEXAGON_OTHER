###########################################################################
#   Scale_Periodicity_MODELBUILDING_HEXAGON_OTHER
#   BUILD PART, INSTANCE AND MESH    
#   THIS IS MEANT FOR ANOTHER HEXAGON GEOMETRYï¼ŒWHICH IS ASSUMED TO HAVE    
#   SIMILAR DEFORMED PATTERN LIKE THE REGULAR HAXAGON MODEL    
#       
###########################################################################
# Vectors to build the geometry
latvec1 = numpy.array([5.*sqrt(3),5.])
latvec2 = numpy.array([0,2])
latvec3 = numpy.array([-5.*sqrt(3),5.])
# vectors determining the coordinates of the corner
AP1 = numpy.array([0.,0.])
AP2 = AP1 + 1*latvec1
AP3 = AP2 + 1*latvec2
AP4 = AP3 + 1*latvec3
AP5 = AP4 - 1*latvec1
AP6 = AP5 - 1*latvec2

# sketch for a single RVE
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=300.0)

# generate the edges  
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP1, point2=AP2)   
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP2, point2=AP3) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP3, point2=AP4) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP4, point2=AP5) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP5, point2=AP6) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=AP6, point2=AP1) 

#generate some feature points to build the crack and mesh
crack1=latvec2+latvec1*conratio
crack2=latvec2+latvec1*lengthcrackratio
#crack3=crack2+latvec2*lengthcrackratio
crack4=crack2+latvec3*lengthcrackratio
crack5=crack4-latvec1*lengthcrackratio
#crack6=crack5-latvec2*lengthcrackratio
crack7=latvec2+latvec3*conratio
crack8=crack2-(0.01,0)
#crack9=crack3-latvec1*0.01
crack10=crack4-(0,0.01)
crack11=crack5+(0.01,0)
#crack12=crack6+latvec1*0.01
crack13=latvec2


# generate the crack edges
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack1, point2=crack2)   
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack2, point2=crack4) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack4, point2=crack5) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack5, point2=crack7) 
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack7, point2=crack11)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack11, point2=crack10)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack10, point2=crack8)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=crack8, point2=crack1)

#build the part 
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1UC', type= DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1UC'].BaseShell(sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']

#get a datum point on the position of crack5, this is used to partition face
mdb.models['Model-1'].parts['Part-1UC'].DatumPointByCoordinate(coords=(crack13[0], crack13[1], 0.0))

#Part module: Virtual Nodes!!
    # part 2,3: virtual nodes.  Each should have 2 Nodes of 2 DOFs, F(2,2)
    #   Part-F1: Ux->F11,  Uy->F21,  shared by real and imaginary mesh
    #   Part-F2: Ux->F12,  Uy->F22,  shared by real and imaginary mesh
mdb.models['Model-1'].Part(dimensionality=THREE_D, 
    name='Part-Point', type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-Point'].ReferencePoint(point=(0.0, 0.0, 0.0))
    # Assign a set to the virtual node
mdb.models['Model-1'].parts['Part-Point'].Set(name='Set-Point', referencePoints=(
    mdb.models['Model-1'].parts['Part-Point'].referencePoints[1], )) 

#partition face to get a better meshing quality
p = mdb.models['Model-1'].parts['Part-1UC']
f = p.faces
v2, e, d = p.vertices, p.edges, p.datums
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack1[0], crack1[1], 
    0.0)), point2=d[2], 
    faces=f)
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack7[0], crack7[1], 
    0.0)), point2=d[2], 
    faces=f)
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(AP1[0], AP1[1], 
    0.0)), point2=d[2], 
    faces=f.findAt(coordinates=((AP1[0]+crack13[0])/2, (AP1[1]+crack13[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack2[0], crack2[1], 
    0.0)), point2=v2.findAt(coordinates=(AP2[0], AP2[1], 0.0)), 
    faces=f.findAt(coordinates=((AP2[0]+crack2[0])/2, (AP2[1]+crack2[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack2[0], crack2[1], 
    0.0)), point2=v2.findAt(coordinates=(AP3[0], AP3[1], 0.0)), 
    faces=f.findAt(coordinates=((AP3[0]+crack2[0])/2, (AP3[1]+crack2[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack4[0], crack4[1], 
    0.0)), point2=v2.findAt(coordinates=(AP4[0], AP4[1], 0.0)), 
    faces=f.findAt(coordinates=((AP4[0]+crack4[0])/2, (AP4[1]+crack4[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack5[0], crack5[1], 
    0.0)), point2=v2.findAt(coordinates=(AP5[0], AP5[1], 0.0)), 
    faces=f.findAt(coordinates=((AP5[0]+crack5[0])/2, (AP5[1]+crack5[1])/2, 
    0.0)))
p.PartitionFaceByShortestPath(point1=v2.findAt(coordinates=(crack5[0], crack5[1], 
    0.0)), point2=v2.findAt(coordinates=(AP6[0], AP6[1], 0.0)), 
    faces=f.findAt(coordinates=((AP6[0]+crack5[0])/2, (AP6[1]+crack5[1])/2, 
    0.0)))

# mesh
SEEDNUMBER=50
ratio=1#RATIO OF THE SIZE OF THE LARGEST MESH TO THE SMALLEST ONES
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP1[0]+AP2[0])/2,(AP1[1]+AP2[1])/2,0),)), ratio=ratio, number=SEEDNUMBER)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP2[0]+AP3[0])/2,(AP2[1]+AP3[1])/2,0),)), ratio=ratio, number=SEEDNUMBER/5)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP3[0]+AP4[0])/2,(AP3[1]+AP4[1])/2,0),)), ratio=ratio, number=SEEDNUMBER)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP4[0]+AP5[0])/2,(AP4[1]+AP5[1])/2,0),)), ratio=ratio, number=SEEDNUMBER)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP5[0]+AP6[0])/2,(AP5[1]+AP6[1])/2,0),)), ratio=ratio, number=SEEDNUMBER/5)
mdb.models['Model-1'].parts['Part-1UC'].seedEdgeByBias(biasMethod=DOUBLE, 
    constraint=FIXED, endEdges=
    mdb.models['Model-1'].parts['Part-1UC'].edges.findAt((((AP6[0]+AP1[0])/2,(AP6[1]+AP1[1])/2,0),)), ratio=ratio, number=SEEDNUMBER)
#p.seedPart(size=latvec1[0]/SEEDNUMBER, deviationFactor=0.1, minSizeFactor=0.1)
	#seed bias method: DOUBLE, to refine the mesh around the crack corner
	#seed the edges by fixed constraint to guarantee a perfect PBC
	#mesh control: QUAD, STRUCTURED, S4R
#mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
#    QUAD, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=STRUCTURED) #QUAD
mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
    QUAD, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=STRUCTURED)
#mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(elemShape=
#    TRI, regions= mdb.models['Model-1'].parts['Part-1UC'].faces, technique=FREE)
mdb.models['Model-1'].parts['Part-1UC'].setMeshControls(algorithm=
    DEFAULT, regions= mdb.models['Model-1'].parts['Part-1UC'].faces)
mdb.models['Model-1'].parts['Part-1UC'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD),), regions=(
   mdb.models['Model-1'].parts['Part-1UC'].faces, ))
#mdb.models['Model-1'].parts['Part-1UC'].setElementType(elemTypes=(ElemType(
#    elemCode=S3, elemLibrary=STANDARD),), regions=(
#    mdb.models['Model-1'].parts['Part-1UC'].faces, ))

# GENERATE MESH FIRST ==========================================================
mdb.models['Model-1'].parts['Part-1UC'].generateMesh()

# creat meshpart ===============================================================
mdb.models['Model-1'].parts['Part-1UC'].PartFromMesh(name='Part-RVE')
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)

# Instance it into assembly =================
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, 
    name='Part-RVE-1', part=mdb.models['Model-1'].parts['Part-RVE'])
	
# create set all ===============================================================
mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    mdb.models['Model-1'].parts['Part-RVE'].nodes, name='Set-all')

# find out the tip of the crack. this is used as a criterion of the deformation capability 
for node1 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node1.coordinates[0]-crack10[0])**2+(node1.coordinates[1]-crack10[1])**2 < 1e-10:
		break

# create a set for the tip
mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node1.label-1:node1.label],), name='tip')

for node2 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node2.coordinates[0]-crack8[0])**2+(node2.coordinates[1]-crack8[1])**2 < 1e-10:
		break

# create a set for the sidetip1
mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node2.label-1:node2.label],), name='sidetip1')

for node3 in mdb.models['Model-1'].parts['Part-RVE'].nodes:
	if (node3.coordinates[0]-crack11[0])**2+(node3.coordinates[1]-crack11[1])**2 < 1e-10:
		break

# create a set for the sidetip2
mdb.models['Model-1'].parts['Part-RVE'].Set(nodes= 
    (mdb.models['Model-1'].parts['Part-RVE'].nodes[node3.label-1:node3.label],), name='sidetip2')

#=================
#Material module: EliteDouble32 (light green)
#=================
# density ======================================================================
RHO=1.0E-9;
mdb.models['Model-1'].Material(name='Material-rubber')
mdb.models['Model-1'].materials['Material-rubber'].Density(table=((RHO, ), ))

# Elastic property: Neo-Hookean ================================================
G0=0.2616
NU0=0.4950      # from K0/G0=100

C10=G0/2.0
D1=3.0*(1.0-2.0*NU0) / (G0 *(1.0+2.0*NU0))
 
mdb.models['Model-1'].materials['Material-rubber'].Hyperelastic(
    table=((C10, D1), ), 
    testData=OFF, type=NEO_HOOKE, volumetricResponse=VOLUMETRIC_DATA)

#=========================================================================
# SECTION
#=========================================================================
# HomogeneousSolidSection ======================================================
mdb.models['Model-1'].HomogeneousShellSection(material='Material-rubber', name=
    'Section-rubber', thickness=0.1)

# SECTION ASSIGNMENT ===========================================================
#mdb.models['Model-1'].parts['Part-lurc'].SectionAssignment(
#    offset=0.0, offsetField='', offsetType=MIDDLE_SURFACE, region=
#    mdb.models['Model-1'].parts['Part-lurc'].sets['Set-all']
#    , sectionName='Section-rubber')    # this command is limited to the not-previously-meshed parts
mdb.models['Model-1'].parts['Part-RVE'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    elements=mdb.models['Model-1'].parts['Part-RVE'].elements), 
    sectionName='Section-rubber')

# LET ME KNOW IF YOU ARE FINISHED ==============================================
print 'Material definition Accomplished!!!'




#=================
# 2. Assembly: INSTANCE VIRTUAL NODES INTO ASSEMBLY
#=================
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-RealH1',
    part=mdb.models['Model-1'].parts['Part-Point'])
mdb.models['Model-1'].rootAssembly.instances['Part-RealH1'].translate(
    vector=(0.0, 0.0, 0.0))
#   # FOR THE H12, H22
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-RealH2',
    part=mdb.models['Model-1'].parts['Part-Point'])
mdb.models['Model-1'].rootAssembly.instances['Part-RealH2'].translate(
    vector=(0.0, 0.0, 0.0))
    
    
    
# LET ME KNOW IF YOU ARE FINISHED ==============================================
print 'Scale_Periodicity_MODELBUILDING_20141011.py Accomplished!!!'

