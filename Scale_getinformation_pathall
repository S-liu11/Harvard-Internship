###########################################################################
#   Scale_getinformation_pathall VERSION:20141126
###########################################################################
#   PURPOSE:
#       READ THE DATA FROM PATHTEST ODB FILES AND SAVE THE PATH INTO CSV FILES
###########################################################################

#INITIATION 
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
from abaqus import *
from abaqusConstants import *
from odbAccess import *
from viewerModules import *
#OPEN CSV FILE FOR I/O OPERATIONS. IN THIS CASE DATA X,Y,Z ARE ALL TWO-DIMENSIONAL, SO THEY CAN ONLY BE WRITTEN INTO SEVERAL CSV FILES
text_file_x = open('scale_path_all_squarescale_tnsh4_x.csv','w')
text_file_y = open('scale_path_all_squarescale_tnsh4_y.csv','w')
text_file_z = open('scale_path_all_squarescale_tnsh4_z.csv','w')
#FORMAT
text_file_x.write('%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f' % (0.,0.,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20))
text_file_y.write('%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f' % (0.,0.,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20))
text_file_z.write('%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f,%2.10f' % (0.,0.,0.02,0.04,0.06,0.08,0.10,0.12,0.14,0.16,0.18,0.20))
#LOAD THIS SCRIPT. SOME DEFINED FUNCTIONS IN THIS SCRIPT MAY BE USED
execfile('Scale_Periodicity_SCSCD_MODULE_20141011.py')
text_file_x.write('\n')
text_file_y.write('\n')
text_file_z.write('\n')
#LOOP TO GET THE FEASIBLE AREA OD THE SQUARE SCALE DEFORMATION DIRECTION
for i in range(0,11):
	#OPEN ODB FILE
	pathname = 'scale_stretching_U3PBC_squarescale_tnsh4_90_51_PATH_'+str(i)+'.odb'
	ODB = openOdb(path = pathname)
	tensile=0.02*i
	#WRITE THE TENSILE STRAIN
	text_file_x.write('%2.10f,' % (tensile))
	text_file_y.write('%2.10f,' % (tensile))
	text_file_z.write('%2.10f,' % (tensile))
	#GET DEFORMATION DATA FROM THREE POINTS ON THE SCALE TO DETERMINE THE SCALE DIRECTION
	tipset=ODB.rootAssembly.instances['PART-RVE-1'].nodeSets['TIP']
	sidetipset1=ODB.rootAssembly.instances['PART-RVE-1'].nodeSets['SIDETIP1']
	sidetipset2=ODB.rootAssembly.instances['PART-RVE-1'].nodeSets['SIDETIP2']
	#GET SETS OF THE VIRTUAL NODES TO GET STRAINS
	H1=ODB.rootAssembly.instances['PART-REALH1'].nodeSets['SET-POINT']
	H2=ODB.rootAssembly.instances['PART-REALH2'].nodeSets['SET-POINT']
	#GET ORIGINAL COORDINATES
	original0=tipset.nodes[0].coordinates
	original1=sidetipset1.nodes[0].coordinates
	original2=sidetipset2.nodes[0].coordinates
	step=ODB.steps
	#GET THE DATA FROM THE LAST FRAME OF EACH STEP
	for stepnum in range(len(step)):
		stepname='SS_'+str(stepnum)
		#GET THE DISPLACEMENTS
		disp0=step[stepname].frames[-1].fieldOutputs['U'].getSubset(region=tipset).values[-1].data[:]
		disp1=step[stepname].frames[-1].fieldOutputs['U'].getSubset(region=sidetipset1).values[-1].data[:]
		disp2=step[stepname].frames[-1].fieldOutputs['U'].getSubset(region=sidetipset2).values[-1].data[:]
		#GET THE SHEAR STRAIN APPLIED
		h21=step[stepname].frames[-1].fieldOutputs['U'].getSubset(region=H2).values[-1].data[0]
		#GET THE DEFORMED COORDINATES
		coord0_1=original0+disp0
		coord1_1=original1+disp1
		coord2_1=original2+disp2
		#CALCULATE THE NORMAL VECTOR
		vec=MATCROSS(coord0_1-coord1_1, coord0_1-coord2_1)
		norm=vec/VECNORM(vec)
		#WRITE THE VECTOR IN THREE CSV FILES
		text_file_x.write('%2.10f,' % (norm[0]))
		text_file_y.write('%2.10f,' % (norm[1]))
		text_file_z.write('%2.10f,' % (norm[2]))
	
	text_file_x.write('\n')
	text_file_y.write('\n')
	text_file_z.write('\n')
	#LET ME KNOW WHEN FINISHED BY EACH STEP
	print 'data_'+str(pathname)+'_get!'
	ODB.close()
	
#ONCE COMPLETING EDITING, CLOSE THE CSV FILES
text_file_x.close()
text_file_y.close()
text_file_z.close()
